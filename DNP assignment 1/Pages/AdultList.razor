@page "/AdultList"
@using Models
@using DNP_assignment_1.Data
@inject IAdultActions _adultActions
@inject NavigationManager _navigationManager
<h3>AdultList</h3>

<p>
    Filter by Name: <input type="text" @oninput="@((arg) => Filter(arg))" style="width: 100px"/>
    
</p>

<p style="color: red">Log in to add/remove/edit adults</p>
@if (adultsToShow == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!adultsToShow.Any())
{
    <p>
        <em>No Adults items exist. Please add some</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Id</th>
            <th>Name</th>
            <th>Surname</th>
            <th>Hair color</th>
            <th>Eye color</th>
            <th>Age</th>
            <th>Weight</th>
            <th>Height</th>
            <th>Sex</th>
            <th>Remove</th>
            <th>Edit</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in adultsToShow)
        {
            <tr>
                <td>@item.Id</td>
                <td>@item.FirstName</td>
                <td>@item.LastName</td>
                <td>@item.HairColor</td>
                <td>@item.EyeColor</td>
                <td>@item.Age</td>
                <td>@item.Weight</td>
                <td>@item.Height</td>
                <td>@item.Sex</td>
                <td>
                    <AuthorizeView Policy="SecurityLevel5">
                    <button @onclick="@(() => RemoveAdult(item))">
                        <i class="oi oi-trash" style="color:red"/>
                    </button>
                    </AuthorizeView>
                </td>
                <td>
                    <AuthorizeView Policy="SecurityLevel5">
                        <button @onclick="@(() => EditAdult(item.Id))">
                            <i class="oi oi-justify-right" style="color:blue"/>
                        </button>
                    </AuthorizeView>
                </td>
            </tr>
        }
        </tbody>
    </table>
}


@code {
    private IList<Adult> adultsToShow;
    private IList<Adult> allAdults;

    private void Filter(ChangeEventArgs changeEventArgs)
    {
        string filterByName = null;
        try
        {
            filterByName = changeEventArgs.Value.ToString();
        }
        catch (Exception e)
        {
    // ignored
        }
        adultsToShow = allAdults.Where(t => (filterByName != null && t.FirstName.Contains(filterByName) || filterByName == null)).ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        allAdults = _adultActions.getAllAdults();
        adultsToShow = allAdults;
    }

    private void RemoveAdult(Adult adult)
    {
        _adultActions.removeAdult(adult);
        adultsToShow.Remove(adult);
        allAdults.Remove(adult);
    }

    private void EditAdult(int id)
    {
        _navigationManager.NavigateTo($"AdultEdit/{id}");
    }
}